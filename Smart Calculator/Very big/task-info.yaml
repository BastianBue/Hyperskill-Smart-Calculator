type: edu
files:
- name: src/calculator/Main.kt
  visible: true
  text: |
    package calculator

    fun main() {
        println("Hello, World!")
    }
  learner_created: false
- name: test/Test.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // tests of functionality of previous steps
                    main.start();

                    // test of /help
                    String output = main.execute("/help").trim();
                    if (output.length() < 4) {
                        return CheckResult.wrong(
                            "It seems like there was no any \"help\" message.");
                    }

                    // input empty string
                    output = main.execute("");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Incorrect response to an empty string. " +
                            "The program should not print anything.");
                    }

                    // testing basic assignment
                    output = main.execute("n = 32");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // testing a big amount of numbers
                    output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }

                    // the same with a variable
                    output = main.execute("33 + 20 + 11 + 49 - n - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }


                    output = main.execute("c = n \nc = 2");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // check value
                    output = main.execute("  c  ").trim();
                    if (!output.equals("2")) {
                        return CheckResult.wrong(
                            "The variable stores not a correct value." +
                            "May be the program could not assign the value " +
                                "of one variable to another one.");
                    }

                    // the sum of the numbers is zero
                    output = main.execute("11 - 13 + c").trim();
                    if (!output.equals("0")) {
                        return CheckResult.wrong(
                            "The problem when sum is equal to 0 has occurred.");
                    }

                    // test of multiple operations
                    output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                    if (!output.equals("10")) {
                        return CheckResult.wrong(
                            "The program cannot process " +
                            "multiple operations with several operators.");
                    }

                    // test of a nonexistent command
                    output = main.execute("/start").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong(
                            "The program should print \"Unknown command\" " +
                            "when a nonexistent command is entered.");
                    }

                    // testing invalid variable name
                    output = main.execute("var1 = 1").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The name of variable should contain only Latin letters.");
                    }

                    // testing invalid value
                    output = main.execute("var = 2a").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The value can be an integer number or a value of another variable");
                    }

                    // testing multiple equalization
                    output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle a invalid assignment.");
                    }

                    // testing assignment by unassigned variable
                    output = main.execute("variable = f").trim().toLowerCase();
                    if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                        return CheckResult.wrong(
                            "The program should not allow an assignment by unassigned variable.");
                    }

                    // checking case sensitivity
                    main.execute("variable = 777");
                    output = main.execute("Variable").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong("The program should be case sensitive.");
                    }

                    // checking case sensitivity
                    main.execute("variable = 777");
                    output = main.execute("Variable").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong("The program should be case sensitive.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // A test suit for multiplication and division
                    main.start();

                    String output = main.execute("4 * 3").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program has problems with multiplication operation.");
                    }

                    output = main.execute("91 / 13").trim();
                    if (!output.equals("7")) {
                        return CheckResult.wrong(
                            "The program has problems with division operation.");
                    }

                    // testing all operators
                    main.execute(" a= 7 \n b =2");
                    output = main.execute("a * 4 / b - (3 - 1)").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program cannot correctly process several operations.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // testing priority of parentheses
                    main.start();

                    // expression from the example
                    String output = main.execute(
                        "7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)").trim();

                    if (!output.equals("155")) {
                        return CheckResult.wrong(
                            "The program cannot reproduce an example from the task.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // a set of negative tests
                    main.start();

                    // tests with unclosed brackets
                    String output = main.execute("8 * (2 + 3").trim().toLowerCase();
                    String output1 = main.execute("4 + 5)").trim().toLowerCase();
                    if (!output.startsWith("invalid") || !output1.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle an invalid expression.");
                    }

                    // sequence of * test
                    output = main.execute("2 ************ 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"*\" should return \"Invalid expression\".");
                    }

                    // sequence of / test
                    output = main.execute("2 // 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"/\" should return \"Invalid expression\".");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // test suit for the 8th stage with very large numbers
                    main.start();

                    // testing basic assignment
                    String output = main.execute("n = 32000000000000000000");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // testing a big amount of numbers
                    output = main.execute(
                        "33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                        "49000000000000000000 - 32000000000000000000 - 9000000000000000000 " +
                        "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                    if (!output.equals("-2999999999999999999")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }

                    // the same with a variable
                    output = main.execute(
                        "33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                        "49000000000000000000 - n - 9000000000000000000 " +
                        "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                    if (!output.equals("-2999999999999999999")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }

                    // testing reassignment with big values
                    output = main.execute("c = n \nc = 2000000000000000000000");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // check value
                    output = main.execute("  c   ").trim();
                    if (!output.equals("2000000000000000000000")) {
                        return CheckResult.wrong(
                            "The variable stores not a correct value." +
                            "May be the program could not assign the value " +
                                "of one variable to another one.");
                    }

                    // the sum of the numbers is zero
                    output = main.execute(
                        "11000000000000000000 - 9000000000000000000 - " +
                        "c + 1998000000000000000000").trim();
                    if (!output.equals("0")) {
                        return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                    }

                    // test of multiple operations
                    output = main.execute(
                        "5000000000000000000 --- 2000000000000000000 " +
                        "++++++ 4000000000000000000 -- 2000000000000000000 ---- 1000000000000000000").trim();
                    if (!output.equals("10000000000000000000")) {
                        return CheckResult.wrong("The program cannot process multiple " +
                            "operations with several operators.");
                    }

                    // testing all operators, with variables
                    main.execute(" a= 7000000000000000000 \n b =2000000000000000000");
                    output = main.execute("a * 4000000000000000000 / " +
                        "b - (3000000000000000000 - 1000000000000000000)").trim();
                    if (!output.equals("12000000000000000000")) {
                        return CheckResult.wrong(
                            "The program cannot correctly process several operations.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                })

            );
        }
    }
  learner_created: false
- name: src/calculator/Menu.kt
  visible: true
  text: |
    package calculator

    val COMMAND_REGEX = Regex("/.*")
    val ASSIGNMENT_REGEX = Regex(".*=.*")
    val VARIABLE_LOOKUP_REGEX = Regex("[a-zA-Z]+")

    fun menu() {
        do {
            val line = readln().replace("\\s".toRegex(), "")
            try {
                when {
                    line == "" -> continue

                    COMMAND_REGEX.matches(line) -> when (line) {
                        "/exit" -> continue
                        "/help" -> println("The programm takes a string and evaluates it Mathemeatically")
                        else -> println("Unknown command")
                    }

                    ASSIGNMENT_REGEX.matches(line) -> {
                        val (key, value) = line.split("=")
                        Calculator.assign(key, value)
                    }

                    VARIABLE_LOOKUP_REGEX.matches(line) -> println(Calculator.lookup(line))

                    else -> println(Calculator.evaluateLine(line))
                }

            } catch (e: UserInputException) {
                println(e.message)
            }
        } while (line != "/exit")
        println("Bye!")
    }
  learner_created: true
- name: src/calculator/Calculator.kt
  visible: true
  text: |+
    package calculator

    import java.util.Stack
    import kotlin.Exception


    val IDENTIFIER_REGEX = Regex("[a-zA-Z]+")
    val VARIABLE_ASSIGNEMENT_REGEX = Regex("-?([a-zA-Z]+|\\d+)")
    val OPERATOR_REGEX = Regex("[+-/*()]")

    open class VariableException(override val message: String?) : Exception(message)
    class UnknownVariableException : VariableException("Unknown variable")
    class InvalidAssignmentException : VariableException("Invalid assignment")
    class InvalidIdentifierException : VariableException("Invalid identifier")
    class UserInputException : Exception("Invalid expression")

    fun validateInfixNotation(notation: String) =
        Regex("[-+*/]*(\\(*(\\d+\\)*|\\(?[a-zA-Z]+\\)*)[-+*/]+)*(\\d+|[a-zA-Z]+\\)*)\\)*").matches(notation)

    fun isOperator(it: Char) = OPERATOR_REGEX.matches(it.toString())

    object Calculator {
        private val variables = mutableMapOf<String, Int>()

        fun assign(key: String, value: String) {
            try {
                if (!IDENTIFIER_REGEX.matches(key)) throw InvalidIdentifierException()
                if (!VARIABLE_ASSIGNEMENT_REGEX.matches(value)) throw InvalidAssignmentException()
                if (value.toIntOrNull() != null) {
                    variables[key] = value.toInt()
                } else {
                    variables[key] = variables[value] ?: throw UnknownVariableException()
                }
            } catch (e: VariableException) {
                println(e.message)
            }
        }

        fun lookup(variableName: String): Int? {
            return try {
                variables[variableName] ?: throw UnknownVariableException()
            } catch (e: UnknownVariableException) {
                println(e.message)
                null
            }
        }

        private fun formatLine(operationString: String): String {
            if (operationString.matches(".*(\\*\\*|//).*".toRegex())) throw UserInputException()
            return operationString
                .replace("--", "+")
                .replace("+-", "-")
                .replace("\\++".toRegex(), "+")
                .replace("\\*+".toRegex(), "*")
                .replace("/+".toRegex(), "/")

        }

        private fun convertToPostFix(line: String): String {
            if (!validateInfixNotation(line)) throw UserInputException()

            val operatorStack = Stack<Char>()
            var postFixNotation = ""

            val getPrecidence = { operator: Char ->
                when (operator) {
                    '+', '-' -> 1
                    '*', '/' -> 2
                    else -> throw Exception("encountered an invalid operator $operator while converting expression to postfix")
                }
            }
            var digits = ""
            line.forEach {
                if (isOperator(it) && digits.isNotEmpty()) {
                    postFixNotation += "$digits "
                    digits = ""
                }
                // add teh spaces
                if (!isOperator(it)) digits += it
                else if (it == '(') operatorStack.push(it)
                else if (it == ')') {
                    do {
                        postFixNotation += "${operatorStack.pop()} "
                        if (operatorStack.isEmpty()) throw UserInputException()
                    } while (operatorStack.peek() != '(')
                    operatorStack.pop()
                } else if (operatorStack.isEmpty() || operatorStack.peek() == '(') operatorStack.push(it)
                else if (getPrecidence(it) > getPrecidence(operatorStack.peek())) operatorStack.push(it)
                else if (getPrecidence(it) <= getPrecidence(operatorStack.peek())) {
                    val precidence = getPrecidence(it)
                    do {
                        postFixNotation += "${operatorStack.pop()} "
                    } while (!operatorStack.isEmpty() && operatorStack.peek() != '(' && getPrecidence(operatorStack.peek()) > precidence)
                    operatorStack.push(it)
                }
            }
            if (operatorStack.contains('(')) throw UserInputException()

            if (digits.isNotEmpty()) postFixNotation += "$digits "
            repeat(operatorStack.size) {
                postFixNotation += "${operatorStack.pop()} "
            }
            return postFixNotation.trim()
        }

        private fun evaluatePostFix(postfix: String): Int {
            val stack = Stack<Int>()
            val items = postfix.split(" ")
            for (i in items.indices) {
                val operator = items[i]
                var number: Int? = null
                if (!OPERATOR_REGEX.matches(operator)) number = operator.toIntOrNull() ?: lookup(operator)
                if (number != null) {
                    stack.push(number)
                } else {
                    val (x, y) = List(2) { stack.pop() }
                    when (operator) {
                        "+" -> stack.push(y + x)
                        "-" -> stack.push(y - x)
                        "*" -> stack.push(y * x)
                        "/" -> stack.push(y / x)
                    }
                }
            }
            return stack.pop()
        }

        fun evaluateLine(line: String): Int {
            val formattedLine = formatLine(line)
            val postFix = convertToPostFix(formattedLine)
            return evaluatePostFix(postFix)
        }

    }








  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7816#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Mon, 23 Jan 2023 15:33:26 UTC
record: -1
