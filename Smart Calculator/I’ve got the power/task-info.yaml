type: edu
files:
- name: src/calculator/Main.kt
  visible: true
  text: |
    package calculator

    fun main() {
        println("Hello, World!")
    }
  learner_created: false
- name: test/Test.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // tests of functionality of previous steps
                    main.start();

                    // test of /help
                    String output = main.execute("/help").trim();
                    if (output.length() < 4) {
                        return CheckResult.wrong(
                            "It seems like there was no any \"help\" message.");
                    }

                    // input empty string
                    output = main.execute("");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Incorrect response to an empty string. " +
                            "The program should not print anything.");
                    }

                    // testing basic assignment
                    output = main.execute("n = -32");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // testing a big amount of numbers
                    output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition and " +
                                "subtraction operations correctly.");
                    }

                    // the same with a variable
                    output = main.execute("33 + 20 + 11 + 49 + n - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition and " +
                                "subtraction operations correctly.");
                    }


                    output = main.execute("c = n \nc = -2");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // check value
                    output = main.execute("  c   ").trim();
                    if (!output.equals("-2")) {
                        return CheckResult.wrong(
                            "The variable stores not a correct value." +
                            "May be the program could not assign the value " +
                                "of one variable to another one.");
                    }

                    // the sum of the numbers is zero
                    output = main.execute("11 - 9 + c").trim();
                    if (!output.equals("0")) {
                        return CheckResult.wrong(
                            "The problem when sum is equal to 0 has occurred.");
                    }

                    // test of multiple operations
                    output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                    if (!output.equals("10")) {
                        return CheckResult.wrong(
                            "The program cannot process multiple operations " +
                                "with several operators.");
                    }

                    // test of a nonexistent command
                    output = main.execute("/start").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong(
                            "The program should print \"Unknown command\" " +
                            "when a nonexistent command is entered.");
                    }

                    // testing invalid variable name
                    output = main.execute("var1 = 1").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The name of variable should contain only Latin letters.");
                    }

                    // testing invalid value
                    output = main.execute("var = 2a").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The value can be an integer number or a value of another variable");
                    }

                    // testing multiple equalization
                    output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle a invalid assignment.");
                    }

                    // testing assignment by unassigned variable
                    output = main.execute("variable = f").trim().toLowerCase();
                    if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                        return CheckResult.wrong(
                            "The program should not allow an assignment by unassigned variable.");
                    }

                    // checking case sensitivity
                    main.execute("variable = 777");
                    output = main.execute("Variable").trim().toLowerCase();
                    if (!output.startsWith("unknown") && !output.startsWith("invalid")) {
                        return CheckResult.wrong("The program should be case sensitive.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // A test suit for multiplication and division
                    main.start();

                    String output = main.execute("4 * 3").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program has problems with multiplication operation.");
                    }

                    output = main.execute("91 / 13").trim();
                    if (!output.equals("7")) {
                        return CheckResult.wrong(
                            "The program has problems with division operation.");
                    }

                    // testing all operators
                    main.execute(" a= 7 \n b =2");
                    output = main.execute("a * 4 / b - (3 - 1)").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program cannot correctly process several operations.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // testing priority of parentheses
                    main.start();

                    // expression from the example
                    String output = main.execute(
                        "7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)").trim();

                    if (!output.equals("155")) {
                        return CheckResult.wrong(
                            "The program cannot reproduce an example from the task.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),
                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // a set of negative tests
                    main.start();

                    // tests with unclosed brackets
                    String output = main.execute("8 * (2 + 3").trim().toLowerCase();
                    String output1 = main.execute("4 + 5)").trim().toLowerCase();
                    if (!output.startsWith("invalid") || !output1.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle an invalid expression.");
                    }

                    // sequence of * test
                    output = main.execute("2 ************ 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"*\" should return \"Invalid expression\".");
                    }

                    // sequence of / test
                    output = main.execute("2 // 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"/\" should return \"Invalid expression\".");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                })
            );
        }
    }
  learner_created: false
- name: src/calculator/Menu.kt
  visible: true
  text: |
    package calculator

    val COMMAND_REGEX = Regex("/.*")
    val ASSIGNMENT_REGEX = Regex(".*=.*")
    val VARIABLE_LOOKUP_REGEX = Regex("[a-zA-Z]+")

    fun menu() {
        do {
            val line = readln().replace("\\s".toRegex(), "")
            when {
                line == "" -> continue

                COMMAND_REGEX.matches(line) -> when (line) {
                    "/exit" -> continue
                    "/help" -> println("The programm takes a string and evaluates it Mathemeatically")
                    else -> println("Unknown command")
                }

                ASSIGNMENT_REGEX.matches(line) -> {
                    val (key, value) = line.split("=")
                    Calculator.assign(key, value)
                }

                VARIABLE_LOOKUP_REGEX.matches(line) -> println(Calculator.lookup(line))

                else -> try {
                    println(Calculator.evaluateLine(line))
                } catch (e: UserInputException) {
                    println(e.message)
                }
            }
        } while (line != "/exit")
        println("Bye!")
    }
  learner_created: true
- name: src/calculator/Calculator.kt
  visible: true
  text: |-
    package calculator

    import java.util.UnknownFormatConversionException
    import kotlin.Exception


    val IDENTIFIER_REGEX = Regex("[a-zA-Z]+")
    val VARIABLE_ASSIGNEMENT_REGEX = Regex("([a-zA-Z]+|\\d+)")

    open class VariableException(override val message: String?) : Exception(message)
    class UnknownVariableException : VariableException("Unknown variable")
    class InvalidAssignmentException : VariableException("Invalid assignment")
    class InvalidIdentifierException : VariableException("Invalid identifier")

    class UserInputException : Exception("Invalid expression")

    object Calculator {
        private val variables = mutableMapOf<String, Int>()

        fun assign(key: String, value: String) {
            try {
                if (!IDENTIFIER_REGEX.matches(key)) throw InvalidIdentifierException()
                if (!VARIABLE_ASSIGNEMENT_REGEX.matches(value)) throw InvalidAssignmentException()
                if (value.first().isDigit()) {
                    variables[key] = value.toInt()
                } else {
                    variables[key] = variables[value] ?: throw UnknownVariableException()
                }
            } catch (e: VariableException) {
                println(e.message)
            }
        }

        fun lookup(variableName: String): Int? {
            return try {
                variables[variableName] ?: throw UnknownVariableException()
            } catch (e: UnknownVariableException) {
                println(e.message)
                null
            }
        }

        fun evaluateLine(line: String): Int {
            if (!Regex("[-+]*((\\d+|[a-zA-Z]+)[+-]+)*(\\d+|[a-zA-Z]+)").matches(line)) throw UserInputException()
            val formattedString = formatLine(line)
            val operations = divideFormattedString(formattedString)
            return evaluateOperations(operations)
        }

        private fun formatLine(operationString: String): String = operationString
            .replace("--", "+")
            .replace("+-", "-")
            .replace("\\++".toRegex(), "+")


        private fun divideFormattedString(formattedLine: String): List<Operation> = buildList {
            val numbers = formattedLine.split("[-+]+".toRegex()).filter { it != "" }
            val operators = formattedLine.split("(\\d+|[a-zA-Z]+)".toRegex()).filter { it != "" }.map {
                when (it) {
                    "+" -> Operation.Operators.ADD
                    "-" -> Operation.Operators.SUBTRACT
                    else -> throw Exception("cannot parse operator $it")
                }
            }.toMutableList()
            if (numbers.size > operators.size) operators.add(0, Operation.Operators.ADD)
            for (i in numbers.indices) {
                val number = variables[numbers[i]] ?: numbers[i].toInt()
                val operator = operators[i]
                add(
                    Operation(operator, number)
                )
            }
        }

        private fun evaluateOperations(operations: List<Operation>): Int {
            var result = 0
            operations.apply { operations.forEach { result = it.applyOperationToValue(result) } }
            return result
        }


        class Operation(
            private val operator: Operators,
            private val number: Int
        ) {
            enum class Operators(val symbol: Char, val transformer: (originalValue: Int, operationValue: Int) -> Int) {
                ADD('+', { originalValue, operationValue -> originalValue + operationValue }),
                SUBTRACT('-', { originalValue, operationValue -> originalValue - operationValue })
            }

            fun applyOperationToValue(originalValue: Int): Int =
                operator.transformer(originalValue, number)
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7815#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 23 Jan 2023 14:45:00 UTC
record: 7
